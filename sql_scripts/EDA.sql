
---------***### Exploratory Data Analysis ###***------------
--** DataBase Exploration.

--## Explore all objects in the database.

SELECT * FROM INFORMATION_SCHEMA.TABLES

--## Explore all the columns in database.

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'

--## Dimension Exploration
-- Exploring all countries from customer table

SELECT DISTINCT country FROM gold.dim_customers

--Explore all categories from products table.
SELECT DISTINCT category, sub_category, product_name FROM gold.dim_products


--## Date exploration
-- find the date of first and last order from fact_sales table.
SELECT MIN(order_date) first_order_date,
	   MAX(order_date) last_order_date,
	   DATEDIFF(YEAR,MIN(order_date),MAX(order_date)) order_range_years
FROM gold.fact_sales

-- age demographics, finding youngest and oldest customers.
SELECT MIN(birthdate) AS oldest_birthdate,
	   DATEDIFF(YEAR,MIN(birthdate), GETDATE()) AS oldest_age,
	   MAX(birthdate) AS youngest_birthdate,
	   DATEDIFF(YEAR,MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers


--## measures exploration
-- find the total sales 
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales

-- find how many itmes are sold
SELECT SUM(quanity) AS total_quantity FROM gold.fact_sales

--find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales

-- find the total number of orders 
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales

-- find the total numbers of products
SELECT COUNT(product_name) AS total_products FROM gold.dim_products
SELECT COUNT(DISTINCT product_name) FROM gold.dim_products

--find the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers


-- find the total number of customer who placed the orders
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.dim_customers

--generate report that show all key metrics of business.

SELECT 'Total_sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_quantity', SUM(quanity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT  'Total Nr.Orders' , COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL 
SELECT 'Total Nr.Products' , COUNT(DISTINCT product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total Nr.Customers' , COUNT(DISTINCT customer_key) FROM gold.dim_customers

--##  Magnitude Analysis

--Find the total customers by countries
SELECT 
	country,
	COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

-- find the total customers by gender
SELECT gender,
	   COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC

--Find total products by category
SELECT category,
	   COUNT(product_name) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC

-- What is the average cost in each category
SELECT category,
	   AVG(product_cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC

-- What is the total revenue genrated for each category
SELECT p.category,
	   SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

-- what is the total revenue generated by each customer
SELECT c.customer_key,
	   c.first_name,
	   c.last_name,
	   SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key,
	   c.first_name,
	   c.last_name
ORDER BY total_revenue DESC

--What is distribution of sold items accross countries
SELECT c.country,
	   SUM(f.quanity) AS total_quantity
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_quantity DESC


---## Ranking Analysis 

--Which 5 products genrates the high revenue.
SELECT TOP 5 
	   p.product_name,
       SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

-- using Window function 
SELECT * 
FROM (SELECT p.product_name,
       SUM(f.sales_amount) AS total_revenue,
	   ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) AS rank_of_products
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name)t

WHERE rank_of_products <= 5



-- what are the top 5 worst performing products in terms of sales.
SELECT TOP 5 
	   p.product_name,
       SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue 


--Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
       c.customer_id,
	   c.first_name,
	   c.last_name,
       SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY  c.customer_id,
	   c.first_name,
	   c.last_name
ORDER BY total_revenue DESC

--Find the top 10 customers who have generated the least revenue
SELECT TOP 10
       c.customer_id,
	   c.first_name,
	   c.last_name,
       SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY  c.customer_id,
	   c.first_name,
	   c.last_name
ORDER BY total_revenue


-- Find the TOP 10 customer who placed fewest orders
SELECT TOP 10
       c.customer_id,
	   c.first_name,
	   c.last_name,
       COUNT(f.order_number) AS total_order
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY  c.customer_id,
	   c.first_name,
	   c.last_name
ORDER BY total_order


-- Find the TOP 10 customer who placed highest orders
SELECT TOP 10
       c.customer_id,
	   c.first_name,
	   c.last_name,
       COUNT(f.order_number) AS total_order
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY  c.customer_id,
	   c.first_name,
	   c.last_name
ORDER BY total_order DESC
